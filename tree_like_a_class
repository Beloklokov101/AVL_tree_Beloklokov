#include <iostream>
using namespace std;

struct element
{
    int number;
    int height;
    element* left;
    element* right;
};

class Container
{
    protected:
        struct element* root;
    public:
    // Виртуальные методы, должны быть реализованы вашим контейнером
        virtual void paste(int value) = 0;
        virtual bool exists(int value) = 0;
        virtual void delete_element(int value) = 0;

    // И этот тоже, хотя к нему потом ещё вернёмся
        virtual void print() = 0;
    
    // Виртуальный деструктор (пока просто поверьте, что он нужен)
        virtual ~Container() { };
};

class tree: public Container
{
    public:

        struct element* take_root();
        
        struct element* create_new_element(int new_number);
        
        int height(element* el);
        int balance_factor(element* el);
        void check(element* el);
        
        struct element* rightrotate(element* el_R);
        struct element* leftrotate(element* el_L);
        struct element* balance(element* el);
        
        struct element* paste(element* el, int n);
        
        struct element* min_elem(element* el);
        struct element* check_min(element* el);
        
        struct element* delete_element(element* el, int n);
        
        void print_min(element* el);
        
        ~tree();
    //private:
        //struct element* root;
};

struct element* tree::take_root()
{
    return root;
}

struct element* tree::create_new_element(int new_number)
{
    struct element* elem = new struct element;
    elem->number = new_number;
    elem->left = NULL;
    elem->right = NULL;
    elem->height = 1;
    return elem;
}

int tree::height(element* el)
{
    int h;
    h = el?el->height:0;
    return h;
}

int tree::balance_factor(element* el)
{
    int delta;
    delta = height(el->right) - height(el->left);
    return delta;
}

void tree::check(element* el)
{
    int hl = height(el->left);
    int hr = height(el->right);
    el->height = (hl>hr?hl:hr) + 1;
}

struct element* tree::rightrotate(element* el_R)
{
    element* el_L = el_R->left;
    el_R->left = el_L->right;
    el_L->right = el_R;
    check(el_R);
    check(el_L);
    return el_L;
}

struct element* tree::leftrotate(element* el_L)
{
    element* el_R = el_L->right;
    el_L->right = el_R->left;
    el_R->left = el_L;
    check(el_L);
    check(el_R);
    return el_R;
}

struct element* tree::balance(element* el)
{
    check(el);
    if (balance_factor(el) == 2)
    {
        if (balance_factor(el->right) < 0)
        {
            el->right = rightrotate(el->right);
        }
        struct element* el0 = leftrotate(el);
        return el0;
    }
    if (balance_factor(el) == -2)
    {
        if (balance_factor(el->left) > 0)
        {
            el->left = leftrotate(el->left);
        }
        struct element* el2 = rightrotate(el);
        return el2;
    }
    return el;
}

struct element* tree::paste(element* el, int n)
{
    if(!el)
    {
        struct element* el0 = create_new_element(n);
        cout << "create new number = " << el0->number << endl;
        root = el0;
        return el0;
    }
    if(n < el->number)
    {
        el->left = paste(el->left, n);
    }
    else
    {
        el->right = paste(el->right, n);
    }
    struct element* el2 = balance(el);
    root = el2;
    return el2;
}

struct element* tree::min_elem(element* el)
{
    struct element* el0;
    if(el->left)
    {
        el0 = min_elem(el->left);
    }
    else
    {
        el0 = el;
    }
    return el0;
}

struct element* tree::check_min(element* el)
{
    if(el->left == 0)
    {
        return el->right;
    }
    el->left = check_min(el->left);
    struct element* el0 = balance(el);
    return el0;
}

struct element* tree::delete_element(element* el, int n)
{
    if(!el) return NULL;
    if(n < el->number)
    {
        el->left = delete_element(el->left, n);
    }
    else if(n > el->number)
    {
        el->right = delete_element(el->right, n);
    }
    else
    {
        struct element* el_L = el->left;
        struct element* el_R = el->right;
        cout << "delete number = " << el->number << endl;
        delete el;
        if(!el_R)
        {
            return el_L;
        }
        struct element* min = min_elem(el_R);
        min->right = check_min(el_R);
        min->left = el_L;
        struct element* el0 = balance(min);
        root = el0;
        return el0;
    }
    struct element* el0 = balance(el);
    root = el0;
    return el0;
}

void tree::print_min(struct element* el)
{
    if(!el->left)
    {
        cout << "Number " << el->number << endl;
    }
    else
    {
        print_min(el->left);
        cout << "Number " << el->number << endl;
    }
    if(el->right)
    {
        print_min(el->right);
    }
}

tree::~tree()
{
    while (root)
    {
        root = delete_element(root, root->number);
    }
}

int main()
{
    Container* c = new tree();

    for(int i = 1; i < 10; i++)
        c->insert(i*i);

    cout << "Container after creation:" << endl;
    c->print();

    if(c->exists(25))
        cout << "Search for value 25: found" << endl;

    if(!c->exists(111))
        cout << "Search for value 111: not found" << endl;

    c->remove(25);
    cout << "Container after deletion of the element:" << endl;
    c->print();

    delete c;
    return 0;
}
