#include <iostream>
#include <stdio.h>
#include <string>
using namespace std;

struct element
{
    int number;
    double height;
    element* left;
    element* right;
};

struct element* create_new_element(double new_number)
{
    struct element* elem = new struct element;
    elem->number = new_number;
    elem->left = NULL;
    elem->right = NULL;
    elem->height = 1;
    return elem;
}

double height(element* el)
{
    double h;
    h = el?el->height:0;
    return h;
}

int balance_factor(element* el)
{
    int delta;
    delta = height(el->right) - height(el->left);
    return delta;
}

void check(element* el)
{
	double hl = height(el->left);
	double hr = height(el->right);
	el->height = (hl>hr?hl:hr) + 1;
}

struct element* rightrotate(element* el_R)
{
	element* el_L = el_R->left;
	el_R->left = el_L->right;
	el_L->right = el_R;
	check(el_R);
	check(el_L);
	return el_L;
}

struct element* leftrotate(element* el_L)
{
	element* el_R = el_L->right;
	el_L->right = el_R->left;
	el_R->left = el_L;
	check(el_L);
	check(el_R);
	return el_R;
}

struct element* balance(element* el)
{
	check(el);
	if(balance_factor(el)==2)
	{
		if( balance_factor(el->right) < 0 )
        {
            el->right = rightrotate(el->right);
        }
        struct element* el0 = leftrotate(el);
		return el0;
	}
	if( balance_factor(el)==-2 )
	{
		if( balance_factor(el->left) > 0  )
        {
            el->left = leftrotate(el->left);
        }
        struct element* el2 = rightrotate(el);
		return el2;
	}
	return el;
}

struct element* paste(element* el, int n)
{
	if(!el)
    {
        struct element* el0 = create_new_element(n);
        cout << "create number = " << el0->number << endl;
        return el0;
    }
	if(n < el->number)
    {
        el->left = paste(el->left, n);
    }
	else
    {
        el->right = paste(el->right, n);
    }
    struct element* el2 = balance(el);
	return el2;
}





struct element* min_elem(element* el)
{
    struct element* el0;
    if(el->left)
    {
        el0 = min_elem(el->left);
    }
    else
    {
        el0 = el;
    }
	return el0;
}

struct element* check_min(element* el)
{
	if(el->left == 0)
    {
        return el->right;
    }
	el->left = check_min(el->left);
	struct element* el0 = balance(el);
	return el0;
}

struct element* delete_element(element* el, int n)
{
	if(!el) return NULL;
	if(n < el->number)
    {
        el->left = delete_element(el->left, n);
    }
	else if(n > el->number)
    {
        el->right = delete_element(el->right, n);
    }
        else
        {
            struct element* el_L = el->left;
            struct element* el_R = el->right;
            cout << "delete number = " << el->number << endl;
            delete el;
            if(!el_R)
            {
                return el_L;
            }
            struct element* min = min_elem(el_R);
            min->right = check_min(el_R);
            min->left = el_L;
            struct element* el0 = balance(min);
            return el0;
        }
	struct element* el0 = balance(el);
	return el0;
}

void print_min(struct element* el)
{
    if(!el->left)
    {
        cout << "Number " << el->number << endl;
    }
    else
    {
        print_min(el->left);
        cout << el->number << endl;
    }
    if(el->right)
    {
        print_min(el->right);
    }
}

struct element* create_tree(struct element* el)
{
    char flag;
    int number;
    cin >> flag;
    while (flag != 'q')
    {
        number = (int) flag - 48;
        el = paste(el, number);
        cin >> flag;
    }
    return el;
}

struct element* delete_menu(element* el)
{
    char flag;
    int number;
    cin >> flag;
    while(flag != 'q')
        {
            number = (int) flag - 48;
            el = delete_element(el, number);
            cin >> flag;
        }
    return el;
}

void menu()
{
    cout << endl << "//////" << endl;
    cout << "If you want to paste or create elements, enter 'paste' and you can add elements until you enter 'q' and you will return to the menu." << endl;
    cout << "if you want to delete elements, enter 'delete' and at the end press 'q'. Then menu." << endl;
    cout << "If you want to display items from lower to higher, enter 'print'. Then menu." << endl;
    cout << "If you want to end the process, enter 'exit'" << endl;
    cout << "//////" << endl << endl;
}

int main()
{
    int N = 0, i = 0, number = 0;
    struct element* el = NULL;
    string word;
    menu();
    getline(cin, word);
    while (word != "exit")
    {
        if (word == "paste")
        {
            cout << "You can paste elements" << endl;
            el = create_tree(el);
            menu();
        }
        else
        {
            if (word == "delete")
                {
                    cout << "You can delete elements" << endl;
                    el = delete_menu(el);
                    menu();
                }
                else
                {
                    if(word == "print")
                    {
                        if (el)
                        {
                            cout << "Elements will be print" << endl;
                            print_min(el);
                            menu();
                        }
                        else
                        {
                            cout << "NULL" << endl;
                            menu();
                        }
                    }
                    //else
                    //{
                    //   cout << "I don't understand" << endl;
                    //}
                }
        }
        getline(cin, word);
    }
    cout << endl << "Arividerchi" << endl;
    while (el)
    {
        el = delete_element(el, el->number);
    }
    return 0;
}
